var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Base64 = /** @class */ (function (_super) {
    __extends(Base64, _super);
    function Base64() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Base64.prototype.encodeFile = function (filePath) { return cordova(this, "encodeFile", {}, arguments); };
    Base64.pluginName = "Base64";
    Base64.plugin = "com-badrit-base64";
    Base64.pluginRef = "plugins.Base64";
    Base64.repo = "https://github.com/hazemhagrass/phonegap-base64";
    Base64.platforms = ["Android", "iOS"];
    Base64 = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], Base64);
    return Base64;
}(IonicNativePlugin));
export { Base64 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Jhc2U2NC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFtQzVDLDBCQUFpQjs7OztJQVEzQywyQkFBVSxhQUFDLFFBQWdCOzs7Ozs7SUFSaEIsTUFBTTtRQUhsQixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csTUFBTTtpQkFwQ25CO0VBb0M0QixpQkFBaUI7U0FBaEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBiZXRhXG4gKiBAbmFtZSBCYXNlNjRcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBQbHVnaW4gaXMgdXNlZCB0byBlbmNvZGUgYmFzZTY0IG9mIGFueSBmaWxlLCBpdCB1c2VzIGpzIGNvZGUgZm9yIGlPUywgYnV0IGluIGNhc2Ugb2YgYW5kcm9pZCBpdCB1c2VzIG5hdGl2ZSBjb2RlIHRvIGhhbmRsZSBhbmRyb2lkIHZlcnNpb25zIGxvd2VyIHRoYW4gdi4zXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXNlNjQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2Jhc2U2NC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFzZTY0OiBCYXNlNjQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIGxldCBmaWxlUGF0aDogc3RyaW5nID0gJ2ZpbGU6Ly8vLi4uJztcbiAqIHRoaXMuYmFzZTY0LmVuY29kZUZpbGUoZmlsZVBhdGgpLnRoZW4oKGJhc2U2NEZpbGU6IHN0cmluZykgPT4ge1xuICogICBjb25zb2xlLmxvZyhiYXNlNjRGaWxlKTtcbiAqIH0sIChlcnIpID0+IHtcbiAqICAgY29uc29sZS5sb2coZXJyKTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0Jhc2U2NCcsXG4gIHBsdWdpbjogJ2NvbS1iYWRyaXQtYmFzZTY0JyxcbiAgcGx1Z2luUmVmOiAncGx1Z2lucy5CYXNlNjQnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2hhemVtaGFncmFzcy9waG9uZWdhcC1iYXNlNjQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEJhc2U2NCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBlbmNvZGVzIGJhc2U2NCBvZiBhbnkgZmlsZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVBhdGggQWJzb2x1dGUgZmlsZSBwYXRoXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBmaWxlIGlzIHN1Y2Nlc3NmdWxseSBlbmNvZGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGVuY29kZUZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn1cbiJdfQ==